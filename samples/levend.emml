<!-- This work is licensed under a Creative Commons Attribution-Share Alike 3.0 United States License. 
	 See http://creativecommons.org/licenses/by-sa/3.0/us for the full text. -->


<mashup xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.openmashup.org/schemas/v1.0/EMML/../schemas/EMMLSpec.xsd"
        xmlns="http://www.openmashup.org/schemas/v1.0/EMML"
        xmlns:myfunc="java:org.oma.emml.utils.EMMLFunctions"
        xmlns:sutils="java:org.apache.commons.lang.StringUtils"
        name="LevenshteinDistanceJoin">

       <emml-meta name="author">Raj Krishnamurthy(raj@jackbe.com)</emml-meta>
   
       <input name="doc1" type="document">
           <data>
               <item><name>Cricket</name></item>
               <item><name>Soccer</name></item>
               <item><name>Football</name></item>
               <item><name>Tennis</name></item>
               <item><name>Foos</name></item>
           </data>
       </input>

       <input name="doc2" type="document">
           <data>
               <item><name>Crict</name></item>
               <item><name>Soer</name></item>
               <item><name>Ftball</name></item>
               <item><name>Teis</name></item>
               <item><name>Fus</name></item>
           </data>
       </input>

       <output name="result" type="document"/>

       <!-- EMML User-defined functions are public java methods. The java class name hosting these functions
            must be specified using java namespace i.e.
            xmlns:myfunc="java:com.jackbe.jbp.jems.client.EMMLPrestoFunctions"

            EMML User-defined functions provides ability to encapsulate re-usable logic in a java method
            and be re-used in any EMML statement/expression.

       -->

       <filter inputvariable="doc1"
               filterexpr = "/data/item[sutils:getLevenshteinDistance(name, 'Crick') &lt; 3]"
               outputvariable="result"/>

		#<display message="result" expr="$result" />	

        <foreach variable="itm1" items="$doc1//*:item">
			<foreach variable="itm2" items="$doc2//*:item">
				<if condition="sutils:getLevenshteinDistance($itm1/name/string(), $itm2/name/string()) &lt; 3">
					<appendresult outputvariable="result">
						<match>
							{$itm1/name/string()} === {$itm2/name/string()}
						</match>
					</appendresult>
				</if>
			</foreach>
		</foreach>


</mashup>

